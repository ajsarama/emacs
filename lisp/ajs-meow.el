;;; -*- lexical-binding: t; -*-
(defun ajs/avy-jump-and-insert ()
  (interactive)
  (avy-goto-char-timer)
  (meow-insert-mode))

(defun meow-setup ()
  (let ((meow-jump-keymap (make-keymap)))
    (meow-define-state jump
      "Meow mode for fast motion"
      :lighter " [J]"
      :keymap meow-jump-keymap))
  (let ((meow-motion-jump-keymap (make-keymap)))
    (meow-define-state motion-jump
      "Meow mode for fast motion"
      :lighter " [MJ]"
      :keymap meow-motion-jump-keymap))
  (meow-define-keys 'motion-jump
    '("w" . other-window)
    '("I" . scroll-other-window-down)
    '("i" . scroll-down)
    '("K" . scroll-other-window)
    '("s" . avy-goto-char-timer)
    '("k" . scroll-up)
    '("<escape>" . meow-motion-mode))
  (meow-define-keys 'jump
    '("<escape>" . meow-normal-mode)
    '("w" . other-window)
    '("I" . scroll-other-window-down)
    '("i" . scroll-down)
    '("K" . scroll-other-window)
    '("k" . scroll-up)
    '("j" . ajs/avy-jump-and-insert)
    '("s" . avy-goto-char-timer)
    '("," . xref-go-back)
    '("." . xref-find-definitions))
  (meow-motion-define-key
   '("/" . meow-motion-jump-mode)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '("q" . meow-join)
   '("w" . other-window)
   '("W" . save-some-buffers)
   '("e" . meow-insert)
   '("E" . meow-open-above)
   '("r" . meow-append)
   '("R" . meow-open-below)
   '("t" . meow-till)
   '("y" . pop-global-mark)
   '("u" . meow-back-word)
   '("U" . meow-back-symbol)
   '("i" . meow-prev)
   '("I" . meow-prev-expand)
   '("o" . meow-next-word)
   '("O" . meow-next-symbol)
   '("p" . meow-cancel-selection)
   '("P" . meow-pop-selection)
   '("[" . meow-undo)
   '("{" . meow-undo-in-selection)
   '("]" . undo-redo)
   '("a" . meow-mark-word)
   '("A" . meow-mark-symbol)
   '("s" . avy-goto-char-timer)
   '("d" . meow-line)
   '("D" . meow-join)
   '("f" . meow-find)
   '("g" . meow-goto-line)
   '("h" . meow-delete)
   '("H" . meow-backward-delete)
   '("j" . meow-left)
   '("J" . meow-left-expand)
   '("k" . meow-next)
   '("K" . meow-next-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("z" . meow-change)
   '("Z" . meow-replace)
   '("x" . meow-kill)
   '("c" . meow-save)
   '("v" . meow-yank)
   '("V" . meow-yank-pop)
   '("b" . meow-reverse)
   '("n" . meow-search)
   '("N" . meow-visit)
   '("m" . meow-block)
   '("M" . repeat)
   '("," . meow-beginning-of-thing)
   '("." . meow-end-of-thing)
   '("<" . meow-inner-of-thing)
   '(">" . meow-bounds-of-thing)
   '("/" . meow-jump-mode)
   '("<escape>" . ignore)))

(use-package meow
  :ensure t
  :demand t
  :config
  (meow-setup)
  (meow-global-mode 1))

(setq meow-expand-hint-remove-delay 0)

(provide 'ajs-meow)
